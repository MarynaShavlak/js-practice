{"mappings":"2hBAAAA,EAAAC,EAAA,S,aAoEAC,EAlBA,SAAkBC,EAAMC,EAAMC,GAC5B,IAAIC,GAAU,EACVC,GAAW,EAEf,GAAmB,mBAARJ,EACT,MAAM,IAAIK,UAnDQ,uBAyDpB,OAJIC,EAASJ,KACXC,EAAU,YAAaD,IAAYA,EAAQC,QAAUA,EACrDC,EAAW,aAAcF,IAAYA,EAAQE,SAAWA,GAEnDP,EAASG,EAAMC,EAAM,CAC1BE,QAAWA,EACXI,QAAWN,EACXG,SAAYA,G,EC1DdI,SAASC,iBAAiB,mBAAmBC,SAAQC,IACnDA,EAAQC,MAAMC,gBAJhB,KAAOC,KAAKC,SAASC,SAAS,IAAM,UAAUC,UAAU,EAAG,GAAGC,aAIf,IAMjD,MAAMC,EAAmBX,SAASY,cAAc,wBAY1CC,EAA4BC,EAAAvB,EAAA,EAVTwB,IACvBC,QAAQC,IAAIC,OAAOC,aAEfD,OAAOC,aAAe,MACxBR,EAAiBS,UAAUC,IAAI,UAE/BrB,SAASsB,oBAAoB,SAAUT,G,GAIkB,KAE7Db,SAASuB,iBAAiB,SAAUV","sources":["node_modules/lodash/throttle.js","src/scroll/scroll.js"],"sourcesContent":["var debounce = require('./debounce'),\n    isObject = require('./isObject');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n","import throttle from 'lodash/throttle';\n\nconst randomColor = () =>\n  '#' + (Math.random().toString(16) + '000000').substring(2, 8).toUpperCase();\n\nconst paintingSectionsInRandomColor = () => {\n  document.querySelectorAll('.scroll-section').forEach(section => {\n    section.style.backgroundColor = randomColor();\n  });\n};\n\npaintingSectionsInRandomColor();\n\nconst animateSectionEl = document.querySelector('.js-animated-section');\n\nconst onDocumentScroll = event => {\n  console.log(window.pageYOffset);\n\n  if (window.pageYOffset >= 800) {\n    animateSectionEl.classList.add('active');\n\n    document.removeEventListener('scroll', throttledOnDocumentScroll);\n  }\n};\n\nconst throttledOnDocumentScroll = throttle(onDocumentScroll, 300);\n\ndocument.addEventListener('scroll', throttledOnDocumentScroll);\n"],"names":["$hp3zx","parcelRequire","$63cbbaac7a391e8c$exports","func","wait","options","leading","trailing","TypeError","$jDBle","maxWait","document","querySelectorAll","forEach","section","style","backgroundColor","Math","random","toString","substring","toUpperCase","$e3f3b584b422d462$var$animateSectionEl","querySelector","$e3f3b584b422d462$var$throttledOnDocumentScroll","$parcel$interopDefault","event","console","log","window","pageYOffset","classList","add","removeEventListener","addEventListener"],"version":3,"file":"scroll.4447ff82.js.map"}